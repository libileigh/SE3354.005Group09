/**
 * @jest-environment jsdom
 */

describe('404 Not Found Page', () => {
  beforeEach(() => {
    document.body.innerHTML = `
      <!DOCTYPE html>
      <html>
        <head>
          <style media="screen">
            body { background: #ECEFF1; }
            @media (max-width: 600px) {
              body, #message { margin-top: 0; background: white; }
            }
          </style>
        </head>
        <body>
          <div id="message">
            <h2>404</h2>
            <h1>Page Not Found</h1>
            <p>The specified file was not found on this website. Please check the URL for mistakes and try again.</p>
            <h3>Why am I seeing this?</h3>
            <p>This page was generated by the Firebase Command-Line Interface.</p>
          </div>
        </body>
      </html>
    `;
  });

  test('TC1: Error message container exists', () => {
    const messageDiv = document.getElementById('message');
    expect(messageDiv).toBeInTheDocument();
  });

  test('TC2: Correct error code displayed', () => {
    const errorCode = document.querySelector('h2');
    expect(errorCode).toHaveTextContent('404');
  });

  test('TC3: Correct page title displayed', () => {
    const pageTitle = document.querySelector('h1');
    expect(pageTitle).toHaveTextContent('Page Not Found');
  });

  test('TC4: Main error description exists', () => {
    const errorDesc = document.querySelectorAll('p')[0];
    expect(errorDesc).toHaveTextContent('The specified file was not found');
  });

  test('TC5: Explanation section exists', () => {
    const whyHeading = document.querySelector('h3');
    const explanation = document.querySelectorAll('p')[1];

    expect(whyHeading).toHaveTextContent('Why am I seeing this?');
    expect(explanation).toHaveTextContent('Firebase Command-Line Interface');
  });

  test('TC6: Responsive design elements exist', () => {
    const styleElement = document.querySelector('style');
    expect(styleElement).toBeInTheDocument();

    const stylesheet = document.styleSheets[0];
    let hasMediaQuery = false;

    for (let i = 0; i < stylesheet.cssRules.length; i++) {
      if (stylesheet.cssRules[i].media &&
          stylesheet.cssRules[i].media.mediaText.includes('(max-width: 600px)')) {
        hasMediaQuery = true;
        break;
      }
    }

    expect(hasMediaQuery).toBe(true);
  });
});
